{"ast":null,"code":"import { Geometry } from '../core/Geometry.js';\nimport { Vec3 } from '../math/Vec3.js';\nimport { Vec2 } from '../math/Vec2.js';\n\n// helper variables\nconst vertex = /* @__PURE__ */new Vec3();\nconst normal = /* @__PURE__ */new Vec3();\nconst uv = /* @__PURE__ */new Vec2();\nconst point = /* @__PURE__ */new Vec3();\nexport class Tube extends Geometry {\n  constructor(gl, {\n    path,\n    radius = 1,\n    tubularSegments = 64,\n    radialSegments = 8,\n    closed = false,\n    attributes = {}\n  } = {}) {\n    super(gl, attributes);\n    this.path = path;\n    this.radius = radius;\n    this.tubularSegments = tubularSegments;\n    this.radialSegments = radialSegments;\n    this.closed = closed;\n    this.frenetFrames = path.computeFrenetFrames(tubularSegments, closed);\n    const numVertices = (tubularSegments + 1) * (radialSegments + 1);\n    const numIndices = tubularSegments * radialSegments * 6;\n    this.positions = new Float32Array(numVertices * 3);\n    this.normals = new Float32Array(numVertices * 3);\n    this.uvs = new Float32Array(numVertices * 2);\n    this.indices = numVertices > 65536 ? new Uint32Array(numIndices) : new Uint16Array(numIndices);\n\n    // create buffer data\n    this._generateAttributes();\n    this._generateIndices();\n    this.addAttribute('position', {\n      size: 3,\n      data: this.positions\n    });\n    this.addAttribute('normal', {\n      size: 3,\n      data: this.normals\n    });\n    this.addAttribute('uv', {\n      size: 2,\n      data: this.uvs\n    });\n    this.setIndex({\n      data: this.indices\n    });\n  }\n  _generateAttributes() {\n    for (let i = 0; i <= this.tubularSegments; i++) {\n      let ci = i;\n      if (i === this.tubularSegments) {\n        // if the geometry is not closed, generate the last row of vertices and normals\n        // at the regular position on the given path\n        // if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)\n        ci = this.closed ? 0 : this.tubularSegments;\n      }\n      this.path.getPointAt(ci / this.tubularSegments, point);\n      // retrieve corresponding normal and binormal\n      const N = this.frenetFrames.normals[ci];\n      const B = this.frenetFrames.binormals[ci];\n\n      // generate normals and vertices for the current segment\n      for (let j = 0; j <= this.radialSegments; j++) {\n        const v = j / this.radialSegments * Math.PI * 2;\n        const sin = Math.sin(v);\n        const cos = -Math.cos(v);\n        const idx = i * (this.radialSegments + 1) + j;\n\n        // normal\n        normal.x = cos * N.x + sin * B.x;\n        normal.y = cos * N.y + sin * B.y;\n        normal.z = cos * N.z + sin * B.z;\n        // normal.normalize(); // ???\n        this.normals.set(normal, idx * 3);\n\n        // vertex\n        vertex.x = point.x + this.radius * normal.x;\n        vertex.y = point.y + this.radius * normal.y;\n        vertex.z = point.z + this.radius * normal.z;\n        this.positions.set(vertex, idx * 3);\n\n        // uv\n        uv.x = i / this.tubularSegments;\n        uv.y = j / this.radialSegments;\n        this.uvs.set(uv, idx * 2);\n      }\n    }\n  }\n  _generateIndices() {\n    for (let j = 1; j <= this.tubularSegments; j++) {\n      for (let i = 1; i <= this.radialSegments; i++) {\n        const a = (this.radialSegments + 1) * (j - 1) + (i - 1);\n        const b = (this.radialSegments + 1) * j + (i - 1);\n        const c = (this.radialSegments + 1) * j + i;\n        const d = (this.radialSegments + 1) * (j - 1) + i;\n        const idx = (j - 1) * this.radialSegments + (i - 1);\n        this.indices.set([a, b, d, b, c, d], idx * 6);\n      }\n    }\n  }\n}","map":{"version":3,"names":["Geometry","Vec3","Vec2","vertex","normal","uv","point","Tube","constructor","gl","path","radius","tubularSegments","radialSegments","closed","attributes","frenetFrames","computeFrenetFrames","numVertices","numIndices","positions","Float32Array","normals","uvs","indices","Uint32Array","Uint16Array","_generateAttributes","_generateIndices","addAttribute","size","data","setIndex","i","ci","getPointAt","N","B","binormals","j","v","Math","PI","sin","cos","idx","x","y","z","set","a","b","c","d"],"sources":["C:/Users/Utilizador/Documents/BASE_WEBSITE/node_modules/ogl/src/extras/Tube.js"],"sourcesContent":["import { Geometry } from '../core/Geometry.js';\nimport { Vec3 } from '../math/Vec3.js';\nimport { Vec2 } from '../math/Vec2.js';\n\n// helper variables\nconst vertex = /* @__PURE__ */ new Vec3();\nconst normal = /* @__PURE__ */ new Vec3();\nconst uv = /* @__PURE__ */ new Vec2();\nconst point = /* @__PURE__ */ new Vec3();\n\nexport class Tube extends Geometry {\n    constructor(gl, { path, radius = 1, tubularSegments = 64, radialSegments = 8, closed = false, attributes = {} } = {}) {\n        super(gl, attributes);\n\n        this.path = path;\n        this.radius = radius;\n        this.tubularSegments = tubularSegments;\n        this.radialSegments = radialSegments;\n        this.closed = closed;\n\n        this.frenetFrames = path.computeFrenetFrames(tubularSegments, closed);\n\n        const numVertices = (tubularSegments + 1) * (radialSegments + 1);\n        const numIndices = tubularSegments * radialSegments * 6;\n        this.positions = new Float32Array(numVertices * 3);\n        this.normals = new Float32Array(numVertices * 3);\n        this.uvs = new Float32Array(numVertices * 2);\n        this.indices = numVertices > 65536 ? new Uint32Array(numIndices) : new Uint16Array(numIndices);\n\n        // create buffer data\n        this._generateAttributes();\n        this._generateIndices();\n\n        this.addAttribute('position', { size: 3, data: this.positions });\n        this.addAttribute('normal', { size: 3, data: this.normals });\n        this.addAttribute('uv', { size: 2, data: this.uvs });\n        this.setIndex({ data: this.indices });\n    }\n\n    _generateAttributes() {\n        for (let i = 0; i <= this.tubularSegments; i++) {\n            let ci = i;\n            if (i === this.tubularSegments) {\n                // if the geometry is not closed, generate the last row of vertices and normals\n                // at the regular position on the given path\n                // if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)\n                ci = this.closed ? 0 : this.tubularSegments;\n            }\n\n            this.path.getPointAt(ci / this.tubularSegments, point);\n            // retrieve corresponding normal and binormal\n            const N = this.frenetFrames.normals[ci];\n            const B = this.frenetFrames.binormals[ci];\n\n            // generate normals and vertices for the current segment\n            for (let j = 0; j <= this.radialSegments; j++) {\n                const v = (j / this.radialSegments) * Math.PI * 2;\n                const sin = Math.sin(v);\n                const cos = -Math.cos(v);\n\n                const idx = i * (this.radialSegments + 1) + j;\n\n                // normal\n                normal.x = cos * N.x + sin * B.x;\n                normal.y = cos * N.y + sin * B.y;\n                normal.z = cos * N.z + sin * B.z;\n                // normal.normalize(); // ???\n                this.normals.set(normal, idx * 3);\n\n                // vertex\n                vertex.x = point.x + this.radius * normal.x;\n                vertex.y = point.y + this.radius * normal.y;\n                vertex.z = point.z + this.radius * normal.z;\n                this.positions.set(vertex, idx * 3);\n\n                // uv\n                uv.x = i / this.tubularSegments;\n                uv.y = j / this.radialSegments;\n                this.uvs.set(uv, idx * 2);\n            }\n        }\n    }\n\n    _generateIndices() {\n        for (let j = 1; j <= this.tubularSegments; j++) {\n            for (let i = 1; i <= this.radialSegments; i++) {\n                const a = (this.radialSegments + 1) * (j - 1) + (i - 1);\n                const b = (this.radialSegments + 1) * j + (i - 1);\n                const c = (this.radialSegments + 1) * j + i;\n                const d = (this.radialSegments + 1) * (j - 1) + i;\n\n                const idx = (j - 1) * this.radialSegments + (i - 1);\n                this.indices.set([a, b, d, b, c, d], idx * 6);\n            }\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
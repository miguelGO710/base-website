{"ast":null,"code":"// https://github.com/mrdoob/three.js/blob/master/src/geometries/TorusGeometry.js\n\nimport { Geometry } from '../core/Geometry.js';\nimport { Vec3 } from '../math/Vec3.js';\nexport class Torus extends Geometry {\n  constructor(gl, {\n    radius = 0.5,\n    tube = 0.2,\n    radialSegments = 8,\n    tubularSegments = 6,\n    arc = Math.PI * 2,\n    attributes = {}\n  } = {}) {\n    const num = (radialSegments + 1) * (tubularSegments + 1);\n    const numIndices = radialSegments * tubularSegments * 6;\n    const vertices = new Float32Array(num * 3);\n    const normals = new Float32Array(num * 3);\n    const uvs = new Float32Array(num * 2);\n    const indices = num > 65536 ? new Uint32Array(numIndices) : new Uint16Array(numIndices);\n    const center = new Vec3();\n    const vertex = new Vec3();\n    const normal = new Vec3();\n\n    // generate vertices, normals and uvs\n    let idx = 0;\n    for (let j = 0; j <= radialSegments; j++) {\n      for (let i = 0; i <= tubularSegments; i++, idx++) {\n        const u = i / tubularSegments * arc;\n        const v = j / radialSegments * Math.PI * 2;\n\n        // vertex\n        vertex.x = (radius + tube * Math.cos(v)) * Math.cos(u);\n        vertex.y = (radius + tube * Math.cos(v)) * Math.sin(u);\n        vertex.z = tube * Math.sin(v);\n        vertices.set([vertex.x, vertex.y, vertex.z], idx * 3);\n\n        // normal\n        center.x = radius * Math.cos(u);\n        center.y = radius * Math.sin(u);\n        normal.sub(vertex, center).normalize();\n        normals.set([normal.x, normal.y, normal.z], idx * 3);\n\n        // uv\n        uvs.set([i / tubularSegments, j / radialSegments], idx * 2);\n      }\n    }\n\n    // generate indices\n    idx = 0;\n    for (let j = 1; j <= radialSegments; j++) {\n      for (let i = 1; i <= tubularSegments; i++, idx++) {\n        // indices\n        const a = (tubularSegments + 1) * j + i - 1;\n        const b = (tubularSegments + 1) * (j - 1) + i - 1;\n        const c = (tubularSegments + 1) * (j - 1) + i;\n        const d = (tubularSegments + 1) * j + i;\n\n        // faces\n        indices.set([a, b, d, b, c, d], idx * 6);\n      }\n    }\n    Object.assign(attributes, {\n      position: {\n        size: 3,\n        data: vertices\n      },\n      normal: {\n        size: 3,\n        data: normals\n      },\n      uv: {\n        size: 2,\n        data: uvs\n      },\n      index: {\n        data: indices\n      }\n    });\n    super(gl, attributes);\n  }\n}","map":{"version":3,"names":["Geometry","Vec3","Torus","constructor","gl","radius","tube","radialSegments","tubularSegments","arc","Math","PI","attributes","num","numIndices","vertices","Float32Array","normals","uvs","indices","Uint32Array","Uint16Array","center","vertex","normal","idx","j","i","u","v","x","cos","y","sin","z","set","sub","normalize","a","b","c","d","Object","assign","position","size","data","uv","index"],"sources":["C:/Users/Utilizador/Documents/BASE_WEBSITE/node_modules/ogl/src/extras/Torus.js"],"sourcesContent":["// https://github.com/mrdoob/three.js/blob/master/src/geometries/TorusGeometry.js\n\nimport { Geometry } from '../core/Geometry.js';\nimport { Vec3 } from '../math/Vec3.js';\n\nexport class Torus extends Geometry {\n    constructor(gl, { radius = 0.5, tube = 0.2, radialSegments = 8, tubularSegments = 6, arc = Math.PI * 2, attributes = {} } = {}) {\n        const num = (radialSegments + 1) * (tubularSegments + 1);\n        const numIndices = radialSegments * tubularSegments * 6;\n\n        const vertices = new Float32Array(num * 3);\n        const normals = new Float32Array(num * 3);\n        const uvs = new Float32Array(num * 2);\n        const indices = num > 65536 ? new Uint32Array(numIndices) : new Uint16Array(numIndices);\n\n        const center = new Vec3();\n        const vertex = new Vec3();\n        const normal = new Vec3();\n\n        // generate vertices, normals and uvs\n        let idx = 0;\n        for (let j = 0; j <= radialSegments; j++) {\n            for (let i = 0; i <= tubularSegments; i++, idx++) {\n                const u = (i / tubularSegments) * arc;\n                const v = (j / radialSegments) * Math.PI * 2;\n\n                // vertex\n                vertex.x = (radius + tube * Math.cos(v)) * Math.cos(u);\n                vertex.y = (radius + tube * Math.cos(v)) * Math.sin(u);\n                vertex.z = tube * Math.sin(v);\n\n                vertices.set([vertex.x, vertex.y, vertex.z], idx * 3);\n\n                // normal\n                center.x = radius * Math.cos(u);\n                center.y = radius * Math.sin(u);\n                normal.sub(vertex, center).normalize();\n\n                normals.set([normal.x, normal.y, normal.z], idx * 3);\n\n                // uv\n                uvs.set([i / tubularSegments, j / radialSegments], idx * 2);\n            }\n        }\n\n        // generate indices\n        idx = 0;\n        for (let j = 1; j <= radialSegments; j++) {\n            for (let i = 1; i <= tubularSegments; i++, idx++) {\n                // indices\n                const a = (tubularSegments + 1) * j + i - 1;\n                const b = (tubularSegments + 1) * (j - 1) + i - 1;\n                const c = (tubularSegments + 1) * (j - 1) + i;\n                const d = (tubularSegments + 1) * j + i;\n\n                // faces\n                indices.set([a, b, d, b, c, d], idx * 6);\n            }\n        }\n\n        Object.assign(attributes, {\n            position: { size: 3, data: vertices },\n            normal: { size: 3, data: normals },\n            uv: { size: 2, data: uvs },\n            index: { data: indices },\n        });\n\n        super(gl, attributes);\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
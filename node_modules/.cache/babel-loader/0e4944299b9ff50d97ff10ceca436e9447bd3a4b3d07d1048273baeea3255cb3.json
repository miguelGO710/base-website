{"ast":null,"code":"import { Texture } from '../core/Texture.js';\n\n// TODO: Support cubemaps\n// Generate textures using https://github.com/TimvanScherpenzeel/texture-compressor\n\nexport class KTXTexture extends Texture {\n  constructor(gl, {\n    buffer,\n    wrapS = gl.CLAMP_TO_EDGE,\n    wrapT = gl.CLAMP_TO_EDGE,\n    anisotropy = 0,\n    minFilter,\n    magFilter\n  } = {}) {\n    super(gl, {\n      generateMipmaps: false,\n      wrapS,\n      wrapT,\n      anisotropy,\n      minFilter,\n      magFilter\n    });\n    if (buffer) return this.parseBuffer(buffer);\n  }\n  parseBuffer(buffer) {\n    const ktx = new KhronosTextureContainer(buffer);\n    ktx.mipmaps.isCompressedTexture = true;\n\n    // Update texture\n    this.image = ktx.mipmaps;\n    this.internalFormat = ktx.glInternalFormat;\n    if (ktx.numberOfMipmapLevels > 1) {\n      if (this.minFilter === this.gl.LINEAR) this.minFilter = this.gl.NEAREST_MIPMAP_LINEAR;\n    } else {\n      if (this.minFilter === this.gl.NEAREST_MIPMAP_LINEAR) this.minFilter = this.gl.LINEAR;\n    }\n\n    // TODO: support cube maps\n    // ktx.numberOfFaces\n  }\n}\nfunction KhronosTextureContainer(buffer) {\n  const idCheck = [0xab, 0x4b, 0x54, 0x58, 0x20, 0x31, 0x31, 0xbb, 0x0d, 0x0a, 0x1a, 0x0a];\n  const id = new Uint8Array(buffer, 0, 12);\n  for (let i = 0; i < id.length; i++) if (id[i] !== idCheck[i]) return console.error('File missing KTX identifier');\n\n  // TODO: Is this always 4? Tested: [android, macos]\n  const size = Uint32Array.BYTES_PER_ELEMENT;\n  const head = new DataView(buffer, 12, 13 * size);\n  const littleEndian = head.getUint32(0, true) === 0x04030201;\n  const glType = head.getUint32(1 * size, littleEndian);\n  if (glType !== 0) return console.warn('only compressed formats currently supported');\n  this.glInternalFormat = head.getUint32(4 * size, littleEndian);\n  let width = head.getUint32(6 * size, littleEndian);\n  let height = head.getUint32(7 * size, littleEndian);\n  this.numberOfFaces = head.getUint32(10 * size, littleEndian);\n  this.numberOfMipmapLevels = Math.max(1, head.getUint32(11 * size, littleEndian));\n  const bytesOfKeyValueData = head.getUint32(12 * size, littleEndian);\n  this.mipmaps = [];\n  let offset = 12 + 13 * 4 + bytesOfKeyValueData;\n  for (let level = 0; level < this.numberOfMipmapLevels; level++) {\n    const levelSize = new Int32Array(buffer, offset, 1)[0]; // size per face, since not supporting array cubemaps\n    offset += 4; // levelSize field\n    for (let face = 0; face < this.numberOfFaces; face++) {\n      const data = new Uint8Array(buffer, offset, levelSize);\n      this.mipmaps.push({\n        data,\n        width,\n        height\n      });\n      offset += levelSize;\n      offset += 3 - (levelSize + 3) % 4; // add padding for odd sized image\n    }\n    width = width >> 1;\n    height = height >> 1;\n  }\n}","map":{"version":3,"names":["Texture","KTXTexture","constructor","gl","buffer","wrapS","CLAMP_TO_EDGE","wrapT","anisotropy","minFilter","magFilter","generateMipmaps","parseBuffer","ktx","KhronosTextureContainer","mipmaps","isCompressedTexture","image","internalFormat","glInternalFormat","numberOfMipmapLevels","LINEAR","NEAREST_MIPMAP_LINEAR","idCheck","id","Uint8Array","i","length","console","error","size","Uint32Array","BYTES_PER_ELEMENT","head","DataView","littleEndian","getUint32","glType","warn","width","height","numberOfFaces","Math","max","bytesOfKeyValueData","offset","level","levelSize","Int32Array","face","data","push"],"sources":["C:/Users/Utilizador/Documents/BASE_WEBSITE/node_modules/ogl/src/extras/KTXTexture.js"],"sourcesContent":["import { Texture } from '../core/Texture.js';\n\n// TODO: Support cubemaps\n// Generate textures using https://github.com/TimvanScherpenzeel/texture-compressor\n\nexport class KTXTexture extends Texture {\n    constructor(gl, { buffer, wrapS = gl.CLAMP_TO_EDGE, wrapT = gl.CLAMP_TO_EDGE, anisotropy = 0, minFilter, magFilter } = {}) {\n        super(gl, {\n            generateMipmaps: false,\n            wrapS,\n            wrapT,\n            anisotropy,\n            minFilter,\n            magFilter,\n        });\n\n        if (buffer) return this.parseBuffer(buffer);\n    }\n\n    parseBuffer(buffer) {\n        const ktx = new KhronosTextureContainer(buffer);\n        ktx.mipmaps.isCompressedTexture = true;\n\n        // Update texture\n        this.image = ktx.mipmaps;\n        this.internalFormat = ktx.glInternalFormat;\n        if (ktx.numberOfMipmapLevels > 1) {\n            if (this.minFilter === this.gl.LINEAR) this.minFilter = this.gl.NEAREST_MIPMAP_LINEAR;\n        } else {\n            if (this.minFilter === this.gl.NEAREST_MIPMAP_LINEAR) this.minFilter = this.gl.LINEAR;\n        }\n\n        // TODO: support cube maps\n        // ktx.numberOfFaces\n    }\n}\n\nfunction KhronosTextureContainer(buffer) {\n    const idCheck = [0xab, 0x4b, 0x54, 0x58, 0x20, 0x31, 0x31, 0xbb, 0x0d, 0x0a, 0x1a, 0x0a];\n    const id = new Uint8Array(buffer, 0, 12);\n    for (let i = 0; i < id.length; i++) if (id[i] !== idCheck[i]) return console.error('File missing KTX identifier');\n\n    // TODO: Is this always 4? Tested: [android, macos]\n    const size = Uint32Array.BYTES_PER_ELEMENT;\n    const head = new DataView(buffer, 12, 13 * size);\n    const littleEndian = head.getUint32(0, true) === 0x04030201;\n    const glType = head.getUint32(1 * size, littleEndian);\n    if (glType !== 0) return console.warn('only compressed formats currently supported');\n    this.glInternalFormat = head.getUint32(4 * size, littleEndian);\n    let width = head.getUint32(6 * size, littleEndian);\n    let height = head.getUint32(7 * size, littleEndian);\n    this.numberOfFaces = head.getUint32(10 * size, littleEndian);\n    this.numberOfMipmapLevels = Math.max(1, head.getUint32(11 * size, littleEndian));\n    const bytesOfKeyValueData = head.getUint32(12 * size, littleEndian);\n\n    this.mipmaps = [];\n    let offset = 12 + 13 * 4 + bytesOfKeyValueData;\n    for (let level = 0; level < this.numberOfMipmapLevels; level++) {\n        const levelSize = new Int32Array(buffer, offset, 1)[0]; // size per face, since not supporting array cubemaps\n        offset += 4; // levelSize field\n        for (let face = 0; face < this.numberOfFaces; face++) {\n            const data = new Uint8Array(buffer, offset, levelSize);\n            this.mipmaps.push({ data, width, height });\n            offset += levelSize;\n            offset += 3 - ((levelSize + 3) % 4); // add padding for odd sized image\n        }\n        width = width >> 1;\n        height = height >> 1;\n    }\n}\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,oBAAoB;;AAE5C;AACA;;AAEA,OAAO,MAAMC,UAAU,SAASD,OAAO,CAAC;EACpCE,WAAWA,CAACC,EAAE,EAAE;IAAEC,MAAM;IAAEC,KAAK,GAAGF,EAAE,CAACG,aAAa;IAAEC,KAAK,GAAGJ,EAAE,CAACG,aAAa;IAAEE,UAAU,GAAG,CAAC;IAAEC,SAAS;IAAEC;EAAU,CAAC,GAAG,CAAC,CAAC,EAAE;IACvH,KAAK,CAACP,EAAE,EAAE;MACNQ,eAAe,EAAE,KAAK;MACtBN,KAAK;MACLE,KAAK;MACLC,UAAU;MACVC,SAAS;MACTC;IACJ,CAAC,CAAC;IAEF,IAAIN,MAAM,EAAE,OAAO,IAAI,CAACQ,WAAW,CAACR,MAAM,CAAC;EAC/C;EAEAQ,WAAWA,CAACR,MAAM,EAAE;IAChB,MAAMS,GAAG,GAAG,IAAIC,uBAAuB,CAACV,MAAM,CAAC;IAC/CS,GAAG,CAACE,OAAO,CAACC,mBAAmB,GAAG,IAAI;;IAEtC;IACA,IAAI,CAACC,KAAK,GAAGJ,GAAG,CAACE,OAAO;IACxB,IAAI,CAACG,cAAc,GAAGL,GAAG,CAACM,gBAAgB;IAC1C,IAAIN,GAAG,CAACO,oBAAoB,GAAG,CAAC,EAAE;MAC9B,IAAI,IAAI,CAACX,SAAS,KAAK,IAAI,CAACN,EAAE,CAACkB,MAAM,EAAE,IAAI,CAACZ,SAAS,GAAG,IAAI,CAACN,EAAE,CAACmB,qBAAqB;IACzF,CAAC,MAAM;MACH,IAAI,IAAI,CAACb,SAAS,KAAK,IAAI,CAACN,EAAE,CAACmB,qBAAqB,EAAE,IAAI,CAACb,SAAS,GAAG,IAAI,CAACN,EAAE,CAACkB,MAAM;IACzF;;IAEA;IACA;EACJ;AACJ;AAEA,SAASP,uBAAuBA,CAACV,MAAM,EAAE;EACrC,MAAMmB,OAAO,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;EACxF,MAAMC,EAAE,GAAG,IAAIC,UAAU,CAACrB,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;EACxC,KAAK,IAAIsB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,EAAE,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE,IAAIF,EAAE,CAACE,CAAC,CAAC,KAAKH,OAAO,CAACG,CAAC,CAAC,EAAE,OAAOE,OAAO,CAACC,KAAK,CAAC,6BAA6B,CAAC;;EAEjH;EACA,MAAMC,IAAI,GAAGC,WAAW,CAACC,iBAAiB;EAC1C,MAAMC,IAAI,GAAG,IAAIC,QAAQ,CAAC9B,MAAM,EAAE,EAAE,EAAE,EAAE,GAAG0B,IAAI,CAAC;EAChD,MAAMK,YAAY,GAAGF,IAAI,CAACG,SAAS,CAAC,CAAC,EAAE,IAAI,CAAC,KAAK,UAAU;EAC3D,MAAMC,MAAM,GAAGJ,IAAI,CAACG,SAAS,CAAC,CAAC,GAAGN,IAAI,EAAEK,YAAY,CAAC;EACrD,IAAIE,MAAM,KAAK,CAAC,EAAE,OAAOT,OAAO,CAACU,IAAI,CAAC,6CAA6C,CAAC;EACpF,IAAI,CAACnB,gBAAgB,GAAGc,IAAI,CAACG,SAAS,CAAC,CAAC,GAAGN,IAAI,EAAEK,YAAY,CAAC;EAC9D,IAAII,KAAK,GAAGN,IAAI,CAACG,SAAS,CAAC,CAAC,GAAGN,IAAI,EAAEK,YAAY,CAAC;EAClD,IAAIK,MAAM,GAAGP,IAAI,CAACG,SAAS,CAAC,CAAC,GAAGN,IAAI,EAAEK,YAAY,CAAC;EACnD,IAAI,CAACM,aAAa,GAAGR,IAAI,CAACG,SAAS,CAAC,EAAE,GAAGN,IAAI,EAAEK,YAAY,CAAC;EAC5D,IAAI,CAACf,oBAAoB,GAAGsB,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEV,IAAI,CAACG,SAAS,CAAC,EAAE,GAAGN,IAAI,EAAEK,YAAY,CAAC,CAAC;EAChF,MAAMS,mBAAmB,GAAGX,IAAI,CAACG,SAAS,CAAC,EAAE,GAAGN,IAAI,EAAEK,YAAY,CAAC;EAEnE,IAAI,CAACpB,OAAO,GAAG,EAAE;EACjB,IAAI8B,MAAM,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,GAAGD,mBAAmB;EAC9C,KAAK,IAAIE,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAG,IAAI,CAAC1B,oBAAoB,EAAE0B,KAAK,EAAE,EAAE;IAC5D,MAAMC,SAAS,GAAG,IAAIC,UAAU,CAAC5C,MAAM,EAAEyC,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACxDA,MAAM,IAAI,CAAC,CAAC,CAAC;IACb,KAAK,IAAII,IAAI,GAAG,CAAC,EAAEA,IAAI,GAAG,IAAI,CAACR,aAAa,EAAEQ,IAAI,EAAE,EAAE;MAClD,MAAMC,IAAI,GAAG,IAAIzB,UAAU,CAACrB,MAAM,EAAEyC,MAAM,EAAEE,SAAS,CAAC;MACtD,IAAI,CAAChC,OAAO,CAACoC,IAAI,CAAC;QAAED,IAAI;QAAEX,KAAK;QAAEC;MAAO,CAAC,CAAC;MAC1CK,MAAM,IAAIE,SAAS;MACnBF,MAAM,IAAI,CAAC,GAAI,CAACE,SAAS,GAAG,CAAC,IAAI,CAAE,CAAC,CAAC;IACzC;IACAR,KAAK,GAAGA,KAAK,IAAI,CAAC;IAClBC,MAAM,GAAGA,MAAM,IAAI,CAAC;EACxB;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { Mesh } from '../core/Mesh.js';\nimport { Mat4 } from '../math/Mat4.js';\nimport { Texture } from '../core/Texture.js';\nconst tempMat4 = /* @__PURE__ */new Mat4();\nconst identity = /* @__PURE__ */new Mat4();\nexport class GLTFSkin extends Mesh {\n  constructor(gl, {\n    skeleton,\n    geometry,\n    program,\n    mode = gl.TRIANGLES\n  } = {}) {\n    super(gl, {\n      geometry,\n      program,\n      mode\n    });\n    this.skeleton = skeleton;\n    this.program = program;\n    this.createBoneTexture();\n  }\n  createBoneTexture() {\n    if (!this.skeleton.joints.length) return;\n    const size = Math.max(4, Math.pow(2, Math.ceil(Math.log(Math.sqrt(this.skeleton.joints.length * 4)) / Math.LN2)));\n    this.boneMatrices = new Float32Array(size * size * 4);\n    this.boneTextureSize = size;\n    this.boneTexture = new Texture(this.gl, {\n      image: this.boneMatrices,\n      generateMipmaps: false,\n      type: this.gl.FLOAT,\n      internalFormat: this.gl.renderer.isWebgl2 ? this.gl.RGBA32F : this.gl.RGBA,\n      minFilter: this.gl.NEAREST,\n      magFilter: this.gl.NEAREST,\n      flipY: false,\n      width: size\n    });\n  }\n  updateUniforms() {\n    // Update bone texture\n    this.skeleton.joints.forEach((bone, i) => {\n      // Find difference between current and bind pose\n      tempMat4.multiply(bone.worldMatrix, bone.bindInverse);\n      this.boneMatrices.set(tempMat4, i * 16);\n    });\n    this.boneTexture.needsUpdate = true;\n    // Reset for programs shared between multiple skins\n    this.program.uniforms.boneTexture.value = this.boneTexture;\n    this.program.uniforms.boneTextureSize.value = this.boneTextureSize;\n  }\n  draw({\n    camera\n  } = {}) {\n    if (!this.program.uniforms.boneTexture) {\n      Object.assign(this.program.uniforms, {\n        boneTexture: {\n          value: this.boneTexture\n        },\n        boneTextureSize: {\n          value: this.boneTextureSize\n        }\n      });\n    }\n    this.updateUniforms();\n\n    // Switch the world matrix with identity to ignore any transforms\n    // on the mesh itself - only use skeleton's transforms\n    const _worldMatrix = this.worldMatrix;\n    this.worldMatrix = identity;\n    super.draw({\n      camera\n    });\n\n    // Switch back to leave identity untouched\n    this.worldMatrix = _worldMatrix;\n  }\n}","map":{"version":3,"names":["Mesh","Mat4","Texture","tempMat4","identity","GLTFSkin","constructor","gl","skeleton","geometry","program","mode","TRIANGLES","createBoneTexture","joints","length","size","Math","max","pow","ceil","log","sqrt","LN2","boneMatrices","Float32Array","boneTextureSize","boneTexture","image","generateMipmaps","type","FLOAT","internalFormat","renderer","isWebgl2","RGBA32F","RGBA","minFilter","NEAREST","magFilter","flipY","width","updateUniforms","forEach","bone","i","multiply","worldMatrix","bindInverse","set","needsUpdate","uniforms","value","draw","camera","Object","assign","_worldMatrix"],"sources":["C:/Users/Utilizador/Documents/BASE_WEBSITE/node_modules/ogl/src/extras/GLTFSkin.js"],"sourcesContent":["import { Mesh } from '../core/Mesh.js';\nimport { Mat4 } from '../math/Mat4.js';\nimport { Texture } from '../core/Texture.js';\n\nconst tempMat4 = /* @__PURE__ */ new Mat4();\nconst identity = /* @__PURE__ */ new Mat4();\n\nexport class GLTFSkin extends Mesh {\n    constructor(gl, { skeleton, geometry, program, mode = gl.TRIANGLES } = {}) {\n        super(gl, { geometry, program, mode });\n        this.skeleton = skeleton;\n        this.program = program;\n        this.createBoneTexture();\n    }\n\n    createBoneTexture() {\n        if (!this.skeleton.joints.length) return;\n        const size = Math.max(4, Math.pow(2, Math.ceil(Math.log(Math.sqrt(this.skeleton.joints.length * 4)) / Math.LN2)));\n        this.boneMatrices = new Float32Array(size * size * 4);\n        this.boneTextureSize = size;\n        this.boneTexture = new Texture(this.gl, {\n            image: this.boneMatrices,\n            generateMipmaps: false,\n            type: this.gl.FLOAT,\n            internalFormat: this.gl.renderer.isWebgl2 ? this.gl.RGBA32F : this.gl.RGBA,\n            minFilter: this.gl.NEAREST,\n            magFilter: this.gl.NEAREST,\n            flipY: false,\n            width: size,\n        });\n    }\n\n    updateUniforms() {\n        // Update bone texture\n        this.skeleton.joints.forEach((bone, i) => {\n            // Find difference between current and bind pose\n            tempMat4.multiply(bone.worldMatrix, bone.bindInverse);\n            this.boneMatrices.set(tempMat4, i * 16);\n        });\n        this.boneTexture.needsUpdate = true;\n        // Reset for programs shared between multiple skins\n        this.program.uniforms.boneTexture.value = this.boneTexture;\n        this.program.uniforms.boneTextureSize.value = this.boneTextureSize;\n    }\n\n    draw({ camera } = {}) {\n        if (!this.program.uniforms.boneTexture) {\n            Object.assign(this.program.uniforms, {\n                boneTexture: { value: this.boneTexture },\n                boneTextureSize: { value: this.boneTextureSize },\n            });\n        }\n\n        this.updateUniforms();\n\n        // Switch the world matrix with identity to ignore any transforms\n        // on the mesh itself - only use skeleton's transforms\n        const _worldMatrix = this.worldMatrix;\n        this.worldMatrix = identity;\n\n        super.draw({ camera });\n\n        // Switch back to leave identity untouched\n        this.worldMatrix = _worldMatrix;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
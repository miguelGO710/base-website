{"ast":null,"code":"import { Geometry } from '../core/Geometry.js';\nimport { Vec3 } from '../math/Vec3.js';\nexport class Sphere extends Geometry {\n  constructor(gl, {\n    radius = 0.5,\n    widthSegments = 16,\n    heightSegments = Math.ceil(widthSegments * 0.5),\n    phiStart = 0,\n    phiLength = Math.PI * 2,\n    thetaStart = 0,\n    thetaLength = Math.PI,\n    attributes = {}\n  } = {}) {\n    const wSegs = widthSegments;\n    const hSegs = heightSegments;\n    const pStart = phiStart;\n    const pLength = phiLength;\n    const tStart = thetaStart;\n    const tLength = thetaLength;\n    const num = (wSegs + 1) * (hSegs + 1);\n    const numIndices = wSegs * hSegs * 6;\n    const position = new Float32Array(num * 3);\n    const normal = new Float32Array(num * 3);\n    const uv = new Float32Array(num * 2);\n    const index = num > 65536 ? new Uint32Array(numIndices) : new Uint16Array(numIndices);\n    let i = 0;\n    let iv = 0;\n    let ii = 0;\n    let te = tStart + tLength;\n    const grid = [];\n    let n = new Vec3();\n    for (let iy = 0; iy <= hSegs; iy++) {\n      let vRow = [];\n      let v = iy / hSegs;\n      for (let ix = 0; ix <= wSegs; ix++, i++) {\n        let u = ix / wSegs;\n        let x = -radius * Math.cos(pStart + u * pLength) * Math.sin(tStart + v * tLength);\n        let y = radius * Math.cos(tStart + v * tLength);\n        let z = radius * Math.sin(pStart + u * pLength) * Math.sin(tStart + v * tLength);\n        position[i * 3] = x;\n        position[i * 3 + 1] = y;\n        position[i * 3 + 2] = z;\n        n.set(x, y, z).normalize();\n        normal[i * 3] = n.x;\n        normal[i * 3 + 1] = n.y;\n        normal[i * 3 + 2] = n.z;\n        uv[i * 2] = u;\n        uv[i * 2 + 1] = 1 - v;\n        vRow.push(iv++);\n      }\n      grid.push(vRow);\n    }\n    for (let iy = 0; iy < hSegs; iy++) {\n      for (let ix = 0; ix < wSegs; ix++) {\n        let a = grid[iy][ix + 1];\n        let b = grid[iy][ix];\n        let c = grid[iy + 1][ix];\n        let d = grid[iy + 1][ix + 1];\n        if (iy !== 0 || tStart > 0) {\n          index[ii * 3] = a;\n          index[ii * 3 + 1] = b;\n          index[ii * 3 + 2] = d;\n          ii++;\n        }\n        if (iy !== hSegs - 1 || te < Math.PI) {\n          index[ii * 3] = b;\n          index[ii * 3 + 1] = c;\n          index[ii * 3 + 2] = d;\n          ii++;\n        }\n      }\n    }\n    Object.assign(attributes, {\n      position: {\n        size: 3,\n        data: position\n      },\n      normal: {\n        size: 3,\n        data: normal\n      },\n      uv: {\n        size: 2,\n        data: uv\n      },\n      index: {\n        data: index\n      }\n    });\n    super(gl, attributes);\n  }\n}","map":{"version":3,"names":["Geometry","Vec3","Sphere","constructor","gl","radius","widthSegments","heightSegments","Math","ceil","phiStart","phiLength","PI","thetaStart","thetaLength","attributes","wSegs","hSegs","pStart","pLength","tStart","tLength","num","numIndices","position","Float32Array","normal","uv","index","Uint32Array","Uint16Array","i","iv","ii","te","grid","n","iy","vRow","v","ix","u","x","cos","sin","y","z","set","normalize","push","a","b","c","d","Object","assign","size","data"],"sources":["C:/Users/Utilizador/Documents/BASE_WEBSITE/node_modules/ogl/src/extras/Sphere.js"],"sourcesContent":["import { Geometry } from '../core/Geometry.js';\nimport { Vec3 } from '../math/Vec3.js';\n\nexport class Sphere extends Geometry {\n    constructor(\n        gl,\n        {\n            radius = 0.5,\n            widthSegments = 16,\n            heightSegments = Math.ceil(widthSegments * 0.5),\n            phiStart = 0,\n            phiLength = Math.PI * 2,\n            thetaStart = 0,\n            thetaLength = Math.PI,\n            attributes = {},\n        } = {}\n    ) {\n        const wSegs = widthSegments;\n        const hSegs = heightSegments;\n        const pStart = phiStart;\n        const pLength = phiLength;\n        const tStart = thetaStart;\n        const tLength = thetaLength;\n\n        const num = (wSegs + 1) * (hSegs + 1);\n        const numIndices = wSegs * hSegs * 6;\n\n        const position = new Float32Array(num * 3);\n        const normal = new Float32Array(num * 3);\n        const uv = new Float32Array(num * 2);\n        const index = num > 65536 ? new Uint32Array(numIndices) : new Uint16Array(numIndices);\n\n        let i = 0;\n        let iv = 0;\n        let ii = 0;\n        let te = tStart + tLength;\n        const grid = [];\n\n        let n = new Vec3();\n\n        for (let iy = 0; iy <= hSegs; iy++) {\n            let vRow = [];\n            let v = iy / hSegs;\n            for (let ix = 0; ix <= wSegs; ix++, i++) {\n                let u = ix / wSegs;\n                let x = -radius * Math.cos(pStart + u * pLength) * Math.sin(tStart + v * tLength);\n                let y = radius * Math.cos(tStart + v * tLength);\n                let z = radius * Math.sin(pStart + u * pLength) * Math.sin(tStart + v * tLength);\n\n                position[i * 3] = x;\n                position[i * 3 + 1] = y;\n                position[i * 3 + 2] = z;\n\n                n.set(x, y, z).normalize();\n                normal[i * 3] = n.x;\n                normal[i * 3 + 1] = n.y;\n                normal[i * 3 + 2] = n.z;\n\n                uv[i * 2] = u;\n                uv[i * 2 + 1] = 1 - v;\n\n                vRow.push(iv++);\n            }\n\n            grid.push(vRow);\n        }\n\n        for (let iy = 0; iy < hSegs; iy++) {\n            for (let ix = 0; ix < wSegs; ix++) {\n                let a = grid[iy][ix + 1];\n                let b = grid[iy][ix];\n                let c = grid[iy + 1][ix];\n                let d = grid[iy + 1][ix + 1];\n\n                if (iy !== 0 || tStart > 0) {\n                    index[ii * 3] = a;\n                    index[ii * 3 + 1] = b;\n                    index[ii * 3 + 2] = d;\n                    ii++;\n                }\n                if (iy !== hSegs - 1 || te < Math.PI) {\n                    index[ii * 3] = b;\n                    index[ii * 3 + 1] = c;\n                    index[ii * 3 + 2] = d;\n                    ii++;\n                }\n            }\n        }\n\n        Object.assign(attributes, {\n            position: { size: 3, data: position },\n            normal: { size: 3, data: normal },\n            uv: { size: 2, data: uv },\n            index: { data: index },\n        });\n\n        super(gl, attributes);\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}